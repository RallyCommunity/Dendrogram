Ext.define('CustomApp', {    extend: 'Rally.app.App',    componentCls: 'app',    itemId: 'rallyApp',    items: [        {            xtype: 'container',            itemId: 'rootSurface',            margin: '5 5 5 5',            layout: 'auto',            title: 'Loading...',            autoEl: {                tag: 'svg'            },            listeners: {                afterrender:  function() {  gApp = this.up('#rallyApp'); gApp._onElementValid(this);},//                resize: function() {  gApp = this.up('#rallyApp'); gApp._onElementResize(this);}            },            visible: false        }    ],    //Set the SVG area to the surface we have provided    _setSVGSize: function(surface) {        var svg = d3.select('svg');        svg.attr('width', surface.getEl().dom.clientWidth);        svg.attr('height',surface.getEl().dom.clientHeight);    },    _nodeTree: null,    //Continuation point after selectors ready/changed    _enterMainApp: function(nodetree) {        if (gApp._nodeTree) {            debugger;            gApp._nodeTree.destroy();        }        gApp._nodeTree = nodetree;      //Save for later        treeHeight = nodetree.leaves().length * 20;        console.log(treeHeight);        //Make surface the size available in the viewport (minus the selectors and margins)        var rs = this.down('#rootSurface');        rs.getEl().setWidth(this.getSize().width - 20);        rs.getEl().setHeight(treeHeight);        var svg = d3.select('svg');        svg.attr('class', 'rootSurface');        //Set the svg area to the surface        this._setSVGSize(rs);        var width = +svg.attr("width"),            height = +svg.attr("height"),            g = svg.append("g").attr("transform","translate(40,0)");        var tree = d3.tree().size([treeHeight, width - 350]);        tree(nodetree);        gApp.tree = tree;        gApp._refreshTree();    },    _refreshTree: function(){        var g = d3.select('g');        var nodetree = gApp._nodeTree;         g.selectAll(".link")            .data(nodetree.descendants().slice(1))            .enter().append("path")            .attr("class", function(d) { return d.data.invisibleLink? "invisible--link" : d.data.local ? "local--link" : "remote--link";})            .attr("d", function(d) {                    return "M" + d.y + "," + d.x                        + "C" + (d.parent.y + 100) + "," + d.x                        + " " + (d.parent.y + 100) + "," + d.parent.x                        + " " + d.parent.y + "," + d.parent.x;            })            ;        var node = g.selectAll(".node")            .data(nodetree.descendants())            .enter().append("g")            .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });        node.append("circle")            .attr("r", 5)            .attr("class", function (d) {//                debugger;                return d.data.error ? "error--node" : "no--errors";            });        node.append("text")              .attr("dy", 3)              .attr("x", function(d) { return d.children ? -8 : 8; })              .attr("y", function(d) { return d.children ? -8 : 0; })              .style("text-anchor", function(d) { return d.children ? d.parent ? "middle": "end" : "start"; })              .text(function(d) {  return d.children?d.data.Name : d.data.Name + ' ' + (d.data.record && d.data.record.data.Name); });    },    //Entry point after creation of render box    _onElementValid: function(rs) {        //Add any useful selectors into this container ( which is inserted before the rootSurface )        //Choose a point when all are 'ready' to jump off into the rest of the app        this.insert (0,{            xtype: 'container',            itemId: 'headerBox',            layout: 'hbox',            items: [                {                    xtype:  'rallyportfolioitemtypecombobox',                    itemId: 'piType',                    margin: '5 0 5 20',                    valueField: 'Ordinal',//                    defaultSelectionPosition: 'last',                    storeConfig: {                        sorters: {                            property: 'Ordinal',                            direction: 'ASC'                        }                    },                    listeners: {                        select: function() { gApp._getArtifacts();}    //Jump off here to add portfolio size selector                    }                },                {                    xtype: 'rallybutton',                    itemId: 'ancestorsButton',                    margin: '5 0 5 20',                    text: 'Show Ancestors',                    handler: function() {                        gApp._handleAncestors();                    }                },                {                    xtype: 'rallybutton',                    itemId: 'descendantsButton',                    margin: '5 0 5 20',                    text: 'Show Descendants',                    handler: function() {                        gApp._handleDescendants();                    }                }            ]        });    },    _hideAncestors: function() {    },    _showAncestors: function() {        //For each leaf, check whether we have the parent, grand-parent, great-grand-parent, etc., etc.        var nodetree = gApp._nodeTree;        var leaves = nodetree.leaves();//        debugger;        var child = { 'Name' : 'Unknown ' ,                'record': {                    'data': {                            'type' : 'NikType',                            'FormattedID' : 'Nik Parent',                            'Name': 'Nik Missing Parent',                            '_ref': '/nik/null',                            '_type': 'type',                            'Parent': null                    }                },                'local': true,                'error': true,       //Might want to highlight these in the UI                'invisibleLink' : false            };        newChild = d3.hierarchy();        newChild.parent = nodetree;        newChild.depth = nodetree.depth+1;        newChild.height = nodetree.height-1;        newChild.x = 0;        newChild.y = 0;        nodetree.children.push(newChild);        gApp._refreshTree();    },    _handleAncestors: function() {        if ( this.hideAncestors) {            this.hideAncestors = false;            this.down('#ancestorsButton').setText('Show Ancestors');            this._hideAncestors();            console.log('Show A');        }        else {            this.down('#ancestorsButton').setText('Hide Ancestors');            this.hideAncestors = true;            this._showAncestors();            console.log('Hide A');        }    },    _hideDescendants: function() {    },    _showDescendants: function() {    },    _handleDescendants: function() {        if ( this.hideDescendants) {            this.hideDescendants = false;            this.down('#descendantsButton').setText('Show Descendants');            this._hideDescendants();            console.log('Show D');        }        else {            this.down('#descendantsButton').setText('Hide Descendants');            this.hideDescendants = true;            this._showDescendants();            console.log('Hide D');        }    },    _nodes: [],    _getArtifacts: function() {        //Starting with lowest selected by the combobox, go up        var modelNumber = gApp.down('#piType').value;        var typeRecords = gApp.down('#piType').store.getRecords();        gApp._nodes = gApp._createMyNodes();        gApp._loadStoreLocal( typeRecords[modelNumber].get('TypePath')).then({            success: function(dataArray) {//                debugger;                gApp._loadParents(dataArray, modelNumber);            },            failure: function(error) {                console.log("Failed to load a store");            }        });    },    _highestOrdinal: function() {        return _.max(gApp._typeStore.data.items, function(type) { return type.get('Ordinal'); }).get('Ordinal');    },    _getModelFromOrd: function(number){        var model = null;        _.each(gApp._typeStore.data.items, function(type) { if (number == type.get('Ordinal')) { model = type; } });        return model && model.get('TypePath');    },    _loadParents: function(dataArray, modelNumber) {        var data = dataArray[0];        var parentModelNumber = modelNumber + 1;        if ((data.length == 0)  ){            //No more parents available, so branch off                var nodetree = gApp._createTree(gApp._nodes);                gApp._enterMainApp(nodetree);        }        else {            gApp._nodes = gApp._nodes.concat(gApp._createNodes(data));            if (parentModelNumber > gApp._highestOrdinal()) {            //No more parents to find, so branch off                var nodetree = gApp._createTree(gApp._nodes);                gApp._enterMainApp(nodetree);            }            else {                //Now create list for parents and find those                var parentsToFind = [];                _.each(data, function(record) {                    parentsToFind.push({'property': 'ObjectID', 'value': Rally.util.Ref.getOidFromRef(record.get('_ref'))});                });                gApp._loadStoreGlobal(gApp._getModelFromOrd(parentModelNumber), Rally.data.wsapi.Filter.or(parentsToFind)).then({                    success: function (dArray) {                        gApp._loadParents(dArray, parentModelNumber);                    },                    failure: function(error) {                        console.log('Oops!');                    }                });            }        }    },    _loadStoreLocal: function(modelName) {        var loadPromise = [];        var store = Ext.create('Rally.data.wsapi.Store', {                        model: modelName,                        context: {                            workspace: gApp.getContext().getWorkspaceRef(),                            project: gApp.getContext().getProjectRef()                        },                        fetch:  ['Name', 'FormattedID', 'Parent', 'DragAndDropRank', 'Children', 'ObjectID']            });        loadPromise.push(store.load());        return Deft.Promise.all(loadPromise);    },    //Load some artifacts from the global arena as a promise    _loadStoreGlobal: function(modelName, filters) {        var loadPromise = [];        var config = {            model: modelName,            context: {                workspace: gApp.getContext().getWorkspaceRef(),                project: null            },            fetch:  ['Name', 'FormattedID', 'Parent', 'DragAndDropRank', 'Children', 'ObjectID']        };//        if (filters) {//            config.filters = filters//        }        var store = Ext.create('Rally.data.wsapi.Store', config);        loadPromise.push(store.load());        return Deft.Promise.all(loadPromise);    },    _fetchDescendants: function(data) {        _.each(data, function (record) {            if (record.get('Children') && (record.get('Children').Count > 0)){                var store = record.getCollection('Children', {                    context:                    {                        workspace: gApp.getContext().getWorkspace(),                        project: null       //Look in the whole workspace that you have visibility for not just the local context                    }                });                promises.push(gApp._fetchChildren(store));            }        });        return Deft.Promise.all(promises);    },    _fetchAncestors: function(data) {        _.each(data, function (record) {            if (record.get('Parent')){                var store = record.getCollection('Parent', {                    context:                    {                        workspace: gApp.getContext().getWorkspace(),                        project: null       //Look in the whole workspace that you have visibility for not just the local context                    }                });                promises.push(gApp._fetchChildren(store));            }        });        return Deft.Promise.all(promises);    },    _createNodes: function(data) {        //These need to be sorted into a hierarchy based on what we have. We are going to add 'other' nodes later        var nodes = [];        //Push them into an array we can reconfigure        _.each(data, function(record) {            nodes.push({'Name': record.get('FormattedID'), 'record': record, 'local': true});        });        return nodes;    },    _createMyNodes: function() {        var nodes = [];        //Create a node for d3 to hook onto        nodes.push({'Name': 'World',            'record': {                'data': {                    '_ref': 'root'                }            },            'local':true        });        //Now push some entries to handle "parent-less" artefacts. This should create a 'tree' branch of parentless things        _.each(gApp._getTypeList(), function(typedef) {            nodes.push( { 'Name' : 'Unknown ' + typedef.Name,                'record': {                    'data': {                            'type' : typedef.type,                            'FormattedID' : 'Parent Not Set',                            'Name': 'For Stories Missing Parent',                            '_ref': '/' + typedef.type + '/null',                            '_type': typedef.type,                            'Parent': null                    }                },                'local': true,                'error': true,       //Might want to highlight these in the UI                'invisibleLink' : false            });        });        return nodes;    },    _findNode: function(nodes, record) {        var returnNode = null;            _.each(nodes, function(node) {                if ((node.record && node.record.data._ref) === record._ref){                     returnNode = node;                }            });        return returnNode;    },    _findParentType: function(record) {        //The only source of truth for the hierachy of types is the typeStore using 'Ordinal'        var ord = null;        for ( var i = 0;  i < gApp._typeStore.totalCount; i++ )        {            if (record.data._type === gApp._typeStore.data.items[i].get('TypePath').toLowerCase()) {                ord = gApp._typeStore.data.items[i].get('Ordinal');                break;            }        }        ord += 1;   //We want the next one up, if beyond the list, set type to root        //If we fail this, then this code is wrong!        if ( i >= gApp._typeStore.totalCount) {            return null;        }        var typeRecord =  _.find(  gApp._typeStore.data.items, function(type) { return type.get('Ordinal') === ord;});        return (typeRecord && typeRecord.get('TypePath').toLowerCase());    },    _findParentById: function(nodes, id) {        return _.find(nodes, function(node) {            return node.record.data._ref === id;        });    },    _findParentNode: function(nodes, child){        if (child.record.data._ref === 'root') return null;        var parent = child.record.data.Parent;        var pParent = null;        if (parent ){            //Check if parent already in the node list. If so, make this one a child of that one            //Will return a parent, or null if not found            pParent = gApp._findNode(nodes, parent);        }        else {            //Here, there is no parent set, so attach to the 'null' parent.            var pt = gApp._findParentType(child.record);            //If we are at the top, we will allow d3 to make a root node by returning null            //If we have a parent type, we will try to return the null parent for this type.            if (pt) {                var parentName = '/' + pt + '/null';                pParent = gApp._findParentById(nodes, parentName);            }        }        //If the record is a type at the top level, then we must return something to indicate 'root'        return pParent?pParent: gApp._findParentById(nodes, 'root');    },     _getTypeList: function() {        var piType = gApp.down('#piType');        var piModels = [];        gApp._typeStore = piType.store;        _.each(piType.store.data.items, function(type) {            piModels.push({ 'type': type.data.TypePath.toLowerCase(), 'Name': type.data.Name});        });        return piModels;    },    _createTree: function (nodes) {        //Try to use d3.stratify to create nodetree for those things we have locally        //We will then need to scan from the bottom up to see if we have all the parents of the local stuff        var nodetree = d3.stratify()                                    .id( function(d) {                                        var retval = (d.record && d.record.data._ref) || null; //No record is an error in the code, try to barf somewhere if that is the case                                        return retval;                                    })                                    .parentId( function(d) {                                        var pParent = gApp._findParentNode(nodes, d);                                        return (pParent && pParent.record && pParent.record.data._ref); })                                    (nodes);        return nodetree;    },    launch: function() {        //API Docs: https://help.rallydev.com/apps/2.1/doc/    }});