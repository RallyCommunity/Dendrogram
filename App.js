Ext.define('CustomApp', {    extend: 'Rally.app.App',    componentCls: 'app',    itemId: 'rallyApp',    items: [        {            xtype: 'container',            itemId: 'rootSurface',            margin: '10 10 10 10',            layout: 'auto',            title: 'Loading...',            autoEl: {                tag: 'svg'            },            listeners: {                afterrender:  function() {  gApp = this.up('#rallyApp'); gApp._onElementValid(this);},//                resize: function() {  gApp = this.up('#rallyApp'); gApp._onElementResize(this);}            },            visible: false        }    ],    //Set the SVG area to the surface we have provided    _setSVGSize: function(surface) {        var svg = d3.select('svg');        svg.attr('width', surface.getEl().dom.clientWidth);        svg.attr('height',surface.getEl().dom.clientHeight);    },    _nodeTree: null,    //Continuation point after selectors ready/changed    _enterMainApp: function(nodetree) {        gApp._nodeTree = nodetree;      //Save for later        treeHeight = nodetree.leaves().length * 20;        console.log(treeHeight);        //Make surface the size available in the viewport (minus the selectors and margins)        var rs = this.down('#rootSurface');        rs.getEl().setWidth(this.getSize().width - 20);        rs.getEl().setHeight((treeHeight - rs.getBox().top) - 15);        var svg = d3.select('svg');        svg.attr('class', 'rootSurface');        //Set the svg area to the surface        this._setSVGSize(rs);        var width = +svg.attr("width"),            height = +svg.attr("height"),            g = svg.append("g").attr("transform","translate(40,0)");        var cluster = d3.cluster().size([treeHeight, width - 350]);        cluster(nodetree);         g.selectAll(".link")            .data(nodetree.descendants().slice(1))            .enter().append("path")            .attr("class", function(d) { return d.data.invisibleLink? "invisible--link" : d.data.local ? "local--link" : "remote--link";})            .attr("d", function(d) {                    return "M" + d.y + "," + d.x                        + "C" + (d.parent.y + 100) + "," + d.x                        + " " + (d.parent.y + 100) + "," + d.parent.x                        + " " + d.parent.y + "," + d.parent.x;            })            ;        var node = g.selectAll(".node")            .data(nodetree.descendants())            .enter().append("g")            .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });        node.append("circle")            .attr("r", 5)            .attr("class", function (d) {  return d.data.error ? "error--node" : "no--errors";});        node.append("text")              .attr("dy", 3)              .attr("x", function(d) { return d.children ? -8 : 8; })              .attr("y", function(d) { return d.children ? -8 : 0; })              .style("text-anchor", function(d) { return d.children ? d.parent ? "middle": "end" : "start"; })              .text(function(d) {  return d.children?d.data.Name : d.data.Name + ' ' + (d.data.record && d.data.record.data.Name); });    },    //Entry point after creation of render box    _onElementValid: function(rs) {        //Add any useful selectors into this container ( which is inserted before the rootSurface )        //Choose a point when all are 'ready' to jump off into the rest of the app        this.insert (0,{            xtype: 'container',            itemId: 'headerBox',            layout: 'hbox',            items: [                {                    xtype:  'rallyportfolioitemtypecombobox',                    itemId: 'piType',                    margin: '5 0 5 20',                    listeners: {                        select: function() { gApp._getArtifacts();}    //Jump off here to add portfolio size selector                    }                },                {                    xtype: 'rallybutton',                    itemId: 'ancestorsButton',                    margin: '5 0 5 20',                    text: 'Show Ancestors',                    handler: function() {                        gApp._handleAncestors();                    }                },                {                    xtype: 'rallybutton',                    itemId: 'descendantsButton',                    margin: '5 0 5 20',                    text: 'Show Descendants',                    handler: function() {                        gApp._handleDescendants();                    }                }            ]        });    },    _hideAncestors: function() {        debugger;    },    _showAncestors: function() {        debugger;    },    _handleAncestors: function() {        if ( this.hideAncestors) {            this.hideAncestors = false;            this.down('#ancestorsButton').setText('Show Ancestors');            this._hideAncestors();            console.log('Show A');        }        else {            this.down('#ancestorsButton').setText('Hide Ancestors');            this.hideAncestors = true;            this._showAncestors();            console.log('Hide A');        }    },    _hideDescendants: function() {        debugger;    },    _showDescendants: function() {        debugger;    },    _handleDescendants: function() {        if ( this.hideDescendants) {            this.hideDescendants = false;            this.down('#descendantsButton').setText('Show Descendants');            this._hideDescendants();            console.log('Show D');        }        else {            this.down('#descendantsButton').setText('Hide Descendants');            this.hideDescendants = true;            this._showDescendants();            console.log('Hide D');        }    },    _typeStore: null,    _getTopMostType: function() {        var topMostType = _.max(gApp._typeStore.data.items, function(type) { return type.get('Ordinal'); });        return topMostType.get('TypePath').toLowerCase();    },    _getTypeList: function() {        var piType = gApp.down('#piType');        var piModels = [];        gApp._typeStore = piType.store;        _.each(piType.store.data.items, function(type) {            piModels.push(type.data.TypePath.toLowerCase());        });        return piModels;    },    _getArtifacts: function() {        //Get the stories in this node        //Get the portfolio items in this node        //Sort the portfolio items in to groups based on        // OR! get the artefacts in this node that are not tasks! (when we get to deal with US/Defects as well)        var piModels = this._getTypeList();        var db = Ext.create('Rally.data.wsapi.artifact.Store', {                        models: piModels,                        context: this.getContext().getDataContext(),     //Make sure the user can specify where to get stuff from                        fetch:  ['Name', 'FormattedID', 'Parent', 'DragAndDropRank']        });        db.load().then({            success: function (data) {                                var nodetree = gApp._createTree( gApp._createMyNodes( data ));                                gApp._enterMainApp(nodetree);                            },            failure: function(error) {            }        });        //Work out how many columns we need across the board - this means traversing up and down        // the artefact hierarchy to find the "other" stuff (not in this node)        //Create a zone in the middle to show the cards in this project node        //If an artefact is "not connected" to a parent, then show an empty "red" card as a parent.    },    _createMyNodes: function(data) {        //These need to be sorted into a hierarchy based on what we have. We are going to add 'other' nodes later        var nodes = [];        //Push them into an array we can reconfigure        _.each(data, function(record) {            nodes.push({'Name': record.get('FormattedID'), 'record': record, 'local': true});        });        //Now push some entries to handle "parent-less" artefacts. This should create a 'tree' branch of parentless things        //TODO: check whether this needs to be constructors (via a model) rather than objects pushed        _.each(gApp._getTypeList(), function(type) {            nodes.push( { 'Name' : 'Unknown ' + type.substring(type.lastIndexOf("/") + 1),                'record': {                    'data': {                            'type' : type,                            'FormattedID' : 'Parent Not Set',                            'Name': 'Missing Parent',                            '_ref': '/' + type + '/null',                            'Parent': null                    }                },                'local': true,                'error': true,       //Might want to highlight these in the UI                'invisibleLink' : true            });        });        //Create a node for d3 to hook onto        nodes.push({'Name': 'World',            'record': {                'data': {                    '_ref': 'root'                }            },            'local':true        });        return nodes;    },    _findNode: function(nodes, record) {        var returnNode = null;//        _.each(nodeTypes, function(nodeType) {            _.each(nodes, function(node) {//                var a = node.record.get('_ref');//                var b = record._ref;//                if (a === b){                if ((node.record && node.record.data._ref) === record._ref){                     returnNode = node;                }            });//        });        return returnNode;    },    _findParentType: function(record) {        //The only source of truth for the hierachy of types is the typeStore using 'Ordinal'        var ord = null;        for ( var i = 0;  i < gApp._typeStore.totalCount; i++ )        {            if (record.data._type === gApp._typeStore.data.items[i].get('TypePath').toLowerCase()) {                ord = gApp._typeStore.data.items[i].get('Ordinal');                break;            }        }        ord += 1;   //We want the next one up, if beyond the list, set type to root        //If we fail this, then this code is wrong!        if ( i >= gApp._typeStore.totalCount) {            return null;        }//        if (  ord > (_.max(gApp._typeStore.data.items, function(type) { return type.get('Ordinal');})).get('Ordinal') ){        var typeRecord =  _.find(  gApp._typeStore.data.items, function(type) { return type.get('Ordinal') === ord;});        return (typeRecord && typeRecord.get('TypePath').toLowerCase());    },    _findParentById: function(nodes, id) {        return _.find(nodes, function(node) {            return node.record.data._ref === id;        });    },    _findParentNode: function(nodes, child){        if (child.record.data._ref === 'root') return null;        var parent = child.record.data.Parent;        var pParent = null;        if (parent ){            //Check if parent already in the node list. If so, make this one a child of that one            //Will return a parent, or null if not found            pParent = gApp._findNode(nodes, parent);        }        else {            //Here, there is no parent set, so attach to the 'null' parent.            var pt = gApp._findParentType(child.record);            //If we are at the top, we will allow d3 to make a root node by returning null            //If we have a parent type, we will try to return the null parent for this type.            if (pt) {                var parentName = '/' + pt + '/null';                pParent = gApp._findParentById(nodes, parentName);            }        }        //If the record is a type at the top level, then we must return something to indicate 'root'        return pParent?pParent: gApp._findParentById(nodes, 'root');    },    _createTree: function (nodes) {        //Try to use d3.stratify to create nodetree for those things we have locally        //We will then need to scan from the bottom up to see if we have all the parents of the local stuff        var nodetree = d3.stratify()                                    .id( function(d) {                                        var retval = (d.record && d.record.data._ref) || null; //No record is an error in the code, try to barf somewhere if that is the case                                        console.log(retval);                                        return retval;                                    })                                    .parentId( function(d) {                                        var pParent = gApp._findParentNode(nodes, d);                                        console.log(d, pParent);                                        return pParent && pParent.record && pParent.record.data._ref; })                                    (nodes);        return nodetree;    },    launch: function() {        //API Docs: https://help.rallydev.com/apps/2.1/doc/    }});